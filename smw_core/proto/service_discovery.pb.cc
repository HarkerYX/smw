// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_discovery.proto

#include "service_discovery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace smw {
namespace core {
namespace proto {
constexpr ServiceInfo::ServiceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , process_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_id_(0u)
  , instance_id_(0u){}
struct ServiceInfoDefaultTypeInternal {
  constexpr ServiceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceInfoDefaultTypeInternal() {}
  union {
    ServiceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
constexpr ServiceDiscovery::ServiceDiscovery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_info_(nullptr)
  , operation_(0)
{}
struct ServiceDiscoveryDefaultTypeInternal {
  constexpr ServiceDiscoveryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceDiscoveryDefaultTypeInternal() {}
  union {
    ServiceDiscovery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceDiscoveryDefaultTypeInternal _ServiceDiscovery_default_instance_;
}  // namespace proto
}  // namespace core
}  // namespace smw
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_service_5fdiscovery_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_service_5fdiscovery_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_service_5fdiscovery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_service_5fdiscovery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceInfo, service_id_),
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceInfo, instance_id_),
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceInfo, host_id_),
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceInfo, process_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceDiscovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceDiscovery, operation_),
  PROTOBUF_FIELD_OFFSET(::smw::core::proto::ServiceDiscovery, service_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::smw::core::proto::ServiceInfo)},
  { 9, -1, sizeof(::smw::core::proto::ServiceDiscovery)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smw::core::proto::_ServiceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::smw::core::proto::_ServiceDiscovery_default_instance_),
};

const char descriptor_table_protodef_service_5fdiscovery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027service_discovery.proto\022\016smw.core.prot"
  "o\"[\n\013ServiceInfo\022\022\n\nservice_id\030\001 \001(\r\022\023\n\013"
  "instance_id\030\002 \001(\r\022\017\n\007host_id\030\004 \001(\t\022\022\n\npr"
  "ocess_id\030\005 \001(\t\"\345\001\n\020ServiceDiscovery\022M\n\to"
  "peration\030\001 \001(\0162:.smw.core.proto.ServiceD"
  "iscovery.ServiceDiscoveryOperation\0221\n\014se"
  "rvice_info\030\002 \001(\0132\033.smw.core.proto.Servic"
  "eInfo\"O\n\031ServiceDiscoveryOperation\022\t\n\005OF"
  "FER\020\000\022\016\n\nSTOP_OFFER\020\001\022\010\n\004FIND\020\002\022\r\n\tSTOP_"
  "FIND\020\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_service_5fdiscovery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_5fdiscovery_2eproto = {
  false, false, 374, descriptor_table_protodef_service_5fdiscovery_2eproto, "service_discovery.proto", 
  &descriptor_table_service_5fdiscovery_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_service_5fdiscovery_2eproto::offsets,
  file_level_metadata_service_5fdiscovery_2eproto, file_level_enum_descriptors_service_5fdiscovery_2eproto, file_level_service_descriptors_service_5fdiscovery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_service_5fdiscovery_2eproto_getter() {
  return &descriptor_table_service_5fdiscovery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_service_5fdiscovery_2eproto(&descriptor_table_service_5fdiscovery_2eproto);
namespace smw {
namespace core {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceDiscovery_ServiceDiscoveryOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_5fdiscovery_2eproto);
  return file_level_enum_descriptors_service_5fdiscovery_2eproto[0];
}
bool ServiceDiscovery_ServiceDiscoveryOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::OFFER;
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::STOP_OFFER;
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::FIND;
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::STOP_FIND;
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::ServiceDiscoveryOperation_MIN;
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::ServiceDiscoveryOperation_MAX;
constexpr int ServiceDiscovery::ServiceDiscoveryOperation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ServiceInfo::_Internal {
 public:
};

ServiceInfo::ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:smw.core.proto.ServiceInfo)
}
ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_id().empty()) {
    host_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_id(), 
      GetArenaForAllocation());
  }
  process_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_id().empty()) {
    process_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&service_id_, &from.service_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&service_id_)) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:smw.core.proto.ServiceInfo)
}

inline void ServiceInfo::SharedCtor() {
host_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
process_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&service_id_)) + sizeof(instance_id_));
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:smw.core.proto.ServiceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceInfo::ArenaDtor(void* object) {
  ServiceInfo* _this = reinterpret_cast< ServiceInfo* >(object);
  (void)_this;
}
void ServiceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:smw.core.proto.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_id_.ClearToEmpty();
  process_id_.ClearToEmpty();
  ::memset(&service_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&service_id_)) + sizeof(instance_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_host_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "smw.core.proto.ServiceInfo.host_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string process_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_process_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "smw.core.proto.ServiceInfo.process_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smw.core.proto.ServiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 service_id = 1;
  if (this->_internal_service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service_id(), target);
  }

  // uint32 instance_id = 2;
  if (this->_internal_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_instance_id(), target);
  }

  // string host_id = 4;
  if (!this->_internal_host_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_id().data(), static_cast<int>(this->_internal_host_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "smw.core.proto.ServiceInfo.host_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host_id(), target);
  }

  // string process_id = 5;
  if (!this->_internal_process_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_id().data(), static_cast<int>(this->_internal_process_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "smw.core.proto.ServiceInfo.process_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_process_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smw.core.proto.ServiceInfo)
  return target;
}

size_t ServiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smw.core.proto.ServiceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_id = 4;
  if (!this->_internal_host_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_id());
  }

  // string process_id = 5;
  if (!this->_internal_process_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_id());
  }

  // uint32 service_id = 1;
  if (this->_internal_service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_id());
  }

  // uint32 instance_id = 2;
  if (this->_internal_instance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_instance_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceInfo::GetClassData() const { return &_class_data_; }

void ServiceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServiceInfo *>(to)->MergeFrom(
      static_cast<const ServiceInfo &>(from));
}


void ServiceInfo::MergeFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smw.core.proto.ServiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host_id().empty()) {
    _internal_set_host_id(from._internal_host_id());
  }
  if (!from._internal_process_id().empty()) {
    _internal_set_process_id(from._internal_process_id());
  }
  if (from._internal_service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
  if (from._internal_instance_id() != 0) {
    _internal_set_instance_id(from._internal_instance_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smw.core.proto.ServiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {
  return true;
}

void ServiceInfo::InternalSwap(ServiceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_id_, GetArenaForAllocation(),
      &other->host_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &process_id_, GetArenaForAllocation(),
      &other->process_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceInfo, instance_id_)
      + sizeof(ServiceInfo::instance_id_)
      - PROTOBUF_FIELD_OFFSET(ServiceInfo, service_id_)>(
          reinterpret_cast<char*>(&service_id_),
          reinterpret_cast<char*>(&other->service_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_service_5fdiscovery_2eproto_getter, &descriptor_table_service_5fdiscovery_2eproto_once,
      file_level_metadata_service_5fdiscovery_2eproto[0]);
}

// ===================================================================

class ServiceDiscovery::_Internal {
 public:
  static const ::smw::core::proto::ServiceInfo& service_info(const ServiceDiscovery* msg);
};

const ::smw::core::proto::ServiceInfo&
ServiceDiscovery::_Internal::service_info(const ServiceDiscovery* msg) {
  return *msg->service_info_;
}
ServiceDiscovery::ServiceDiscovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:smw.core.proto.ServiceDiscovery)
}
ServiceDiscovery::ServiceDiscovery(const ServiceDiscovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service_info()) {
    service_info_ = new ::smw::core::proto::ServiceInfo(*from.service_info_);
  } else {
    service_info_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:smw.core.proto.ServiceDiscovery)
}

inline void ServiceDiscovery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&service_info_)) + sizeof(operation_));
}

ServiceDiscovery::~ServiceDiscovery() {
  // @@protoc_insertion_point(destructor:smw.core.proto.ServiceDiscovery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceDiscovery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_info_;
}

void ServiceDiscovery::ArenaDtor(void* object) {
  ServiceDiscovery* _this = reinterpret_cast< ServiceDiscovery* >(object);
  (void)_this;
}
void ServiceDiscovery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceDiscovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceDiscovery::Clear() {
// @@protoc_insertion_point(message_clear_start:smw.core.proto.ServiceDiscovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDiscovery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .smw.core.proto.ServiceDiscovery.ServiceDiscoveryOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation>(val));
        } else goto handle_unusual;
        continue;
      // .smw.core.proto.ServiceInfo service_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceDiscovery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smw.core.proto.ServiceDiscovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .smw.core.proto.ServiceDiscovery.ServiceDiscoveryOperation operation = 1;
  if (this->_internal_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // .smw.core.proto.ServiceInfo service_info = 2;
  if (this->_internal_has_service_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::service_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smw.core.proto.ServiceDiscovery)
  return target;
}

size_t ServiceDiscovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smw.core.proto.ServiceDiscovery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .smw.core.proto.ServiceInfo service_info = 2;
  if (this->_internal_has_service_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_info_);
  }

  // .smw.core.proto.ServiceDiscovery.ServiceDiscoveryOperation operation = 1;
  if (this->_internal_operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceDiscovery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceDiscovery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceDiscovery::GetClassData() const { return &_class_data_; }

void ServiceDiscovery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServiceDiscovery *>(to)->MergeFrom(
      static_cast<const ServiceDiscovery &>(from));
}


void ServiceDiscovery::MergeFrom(const ServiceDiscovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smw.core.proto.ServiceDiscovery)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_info()) {
    _internal_mutable_service_info()->::smw::core::proto::ServiceInfo::MergeFrom(from._internal_service_info());
  }
  if (from._internal_operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceDiscovery::CopyFrom(const ServiceDiscovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smw.core.proto.ServiceDiscovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscovery::IsInitialized() const {
  return true;
}

void ServiceDiscovery::InternalSwap(ServiceDiscovery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceDiscovery, operation_)
      + sizeof(ServiceDiscovery::operation_)
      - PROTOBUF_FIELD_OFFSET(ServiceDiscovery, service_info_)>(
          reinterpret_cast<char*>(&service_info_),
          reinterpret_cast<char*>(&other->service_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscovery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_service_5fdiscovery_2eproto_getter, &descriptor_table_service_5fdiscovery_2eproto_once,
      file_level_metadata_service_5fdiscovery_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace core
}  // namespace smw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::smw::core::proto::ServiceInfo* Arena::CreateMaybeMessage< ::smw::core::proto::ServiceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smw::core::proto::ServiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::smw::core::proto::ServiceDiscovery* Arena::CreateMaybeMessage< ::smw::core::proto::ServiceDiscovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smw::core::proto::ServiceDiscovery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
