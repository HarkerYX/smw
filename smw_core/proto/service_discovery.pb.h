// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_discovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_5fdiscovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_5fdiscovery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_5fdiscovery_2eproto;
namespace smw {
namespace core {
namespace proto {
class ServiceDiscovery;
struct ServiceDiscoveryDefaultTypeInternal;
extern ServiceDiscoveryDefaultTypeInternal _ServiceDiscovery_default_instance_;
class ServiceInfo;
struct ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
}  // namespace proto
}  // namespace core
}  // namespace smw
PROTOBUF_NAMESPACE_OPEN
template<> ::smw::core::proto::ServiceDiscovery* Arena::CreateMaybeMessage<::smw::core::proto::ServiceDiscovery>(Arena*);
template<> ::smw::core::proto::ServiceInfo* Arena::CreateMaybeMessage<::smw::core::proto::ServiceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smw {
namespace core {
namespace proto {

enum ServiceDiscovery_ServiceDiscoveryOperation : int {
  ServiceDiscovery_ServiceDiscoveryOperation_OFFER = 0,
  ServiceDiscovery_ServiceDiscoveryOperation_STOP_OFFER = 1,
  ServiceDiscovery_ServiceDiscoveryOperation_FIND = 2,
  ServiceDiscovery_ServiceDiscoveryOperation_STOP_FIND = 3,
  ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscovery_ServiceDiscoveryOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscovery_ServiceDiscoveryOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceDiscovery_ServiceDiscoveryOperation_IsValid(int value);
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MIN = ServiceDiscovery_ServiceDiscoveryOperation_OFFER;
constexpr ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MAX = ServiceDiscovery_ServiceDiscoveryOperation_STOP_FIND;
constexpr int ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_ARRAYSIZE = ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceDiscovery_ServiceDiscoveryOperation_descriptor();
template<typename T>
inline const std::string& ServiceDiscovery_ServiceDiscoveryOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceDiscovery_ServiceDiscoveryOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceDiscovery_ServiceDiscoveryOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceDiscovery_ServiceDiscoveryOperation_descriptor(), enum_t_value);
}
inline bool ServiceDiscovery_ServiceDiscoveryOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceDiscovery_ServiceDiscoveryOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceDiscovery_ServiceDiscoveryOperation>(
    ServiceDiscovery_ServiceDiscoveryOperation_descriptor(), name, value);
}
// ===================================================================

class ServiceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smw.core.proto.ServiceInfo) */ {
 public:
  inline ServiceInfo() : ServiceInfo(nullptr) {}
  ~ServiceInfo() override;
  explicit constexpr ServiceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smw.core.proto.ServiceInfo";
  }
  protected:
  explicit ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostIdFieldNumber = 4,
    kProcessIdFieldNumber = 5,
    kServiceIdFieldNumber = 1,
    kInstanceIdFieldNumber = 2,
  };
  // string host_id = 4;
  void clear_host_id();
  const std::string& host_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_id();
  PROTOBUF_NODISCARD std::string* release_host_id();
  void set_allocated_host_id(std::string* host_id);
  private:
  const std::string& _internal_host_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_id(const std::string& value);
  std::string* _internal_mutable_host_id();
  public:

  // string process_id = 5;
  void clear_process_id();
  const std::string& process_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_id();
  PROTOBUF_NODISCARD std::string* release_process_id();
  void set_allocated_process_id(std::string* process_id);
  private:
  const std::string& _internal_process_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_id(const std::string& value);
  std::string* _internal_mutable_process_id();
  public:

  // uint32 service_id = 1;
  void clear_service_id();
  uint32_t service_id() const;
  void set_service_id(uint32_t value);
  private:
  uint32_t _internal_service_id() const;
  void _internal_set_service_id(uint32_t value);
  public:

  // uint32 instance_id = 2;
  void clear_instance_id();
  uint32_t instance_id() const;
  void set_instance_id(uint32_t value);
  private:
  uint32_t _internal_instance_id() const;
  void _internal_set_instance_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:smw.core.proto.ServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_id_;
  uint32_t service_id_;
  uint32_t instance_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// -------------------------------------------------------------------

class ServiceDiscovery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smw.core.proto.ServiceDiscovery) */ {
 public:
  inline ServiceDiscovery() : ServiceDiscovery(nullptr) {}
  ~ServiceDiscovery() override;
  explicit constexpr ServiceDiscovery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceDiscovery(const ServiceDiscovery& from);
  ServiceDiscovery(ServiceDiscovery&& from) noexcept
    : ServiceDiscovery() {
    *this = ::std::move(from);
  }

  inline ServiceDiscovery& operator=(const ServiceDiscovery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDiscovery& operator=(ServiceDiscovery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceDiscovery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceDiscovery* internal_default_instance() {
    return reinterpret_cast<const ServiceDiscovery*>(
               &_ServiceDiscovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceDiscovery& a, ServiceDiscovery& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDiscovery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDiscovery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceDiscovery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceDiscovery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceDiscovery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceDiscovery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDiscovery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smw.core.proto.ServiceDiscovery";
  }
  protected:
  explicit ServiceDiscovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscoveryOperation;
  static constexpr ServiceDiscoveryOperation OFFER =
    ServiceDiscovery_ServiceDiscoveryOperation_OFFER;
  static constexpr ServiceDiscoveryOperation STOP_OFFER =
    ServiceDiscovery_ServiceDiscoveryOperation_STOP_OFFER;
  static constexpr ServiceDiscoveryOperation FIND =
    ServiceDiscovery_ServiceDiscoveryOperation_FIND;
  static constexpr ServiceDiscoveryOperation STOP_FIND =
    ServiceDiscovery_ServiceDiscoveryOperation_STOP_FIND;
  static inline bool ServiceDiscoveryOperation_IsValid(int value) {
    return ServiceDiscovery_ServiceDiscoveryOperation_IsValid(value);
  }
  static constexpr ServiceDiscoveryOperation ServiceDiscoveryOperation_MIN =
    ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MIN;
  static constexpr ServiceDiscoveryOperation ServiceDiscoveryOperation_MAX =
    ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_MAX;
  static constexpr int ServiceDiscoveryOperation_ARRAYSIZE =
    ServiceDiscovery_ServiceDiscoveryOperation_ServiceDiscoveryOperation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServiceDiscoveryOperation_descriptor() {
    return ServiceDiscovery_ServiceDiscoveryOperation_descriptor();
  }
  template<typename T>
  static inline const std::string& ServiceDiscoveryOperation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceDiscoveryOperation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceDiscoveryOperation_Name.");
    return ServiceDiscovery_ServiceDiscoveryOperation_Name(enum_t_value);
  }
  static inline bool ServiceDiscoveryOperation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServiceDiscoveryOperation* value) {
    return ServiceDiscovery_ServiceDiscoveryOperation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // .smw.core.proto.ServiceInfo service_info = 2;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::smw::core::proto::ServiceInfo& service_info() const;
  PROTOBUF_NODISCARD ::smw::core::proto::ServiceInfo* release_service_info();
  ::smw::core::proto::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::smw::core::proto::ServiceInfo* service_info);
  private:
  const ::smw::core::proto::ServiceInfo& _internal_service_info() const;
  ::smw::core::proto::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::smw::core::proto::ServiceInfo* service_info);
  ::smw::core::proto::ServiceInfo* unsafe_arena_release_service_info();

  // .smw.core.proto.ServiceDiscovery.ServiceDiscoveryOperation operation = 1;
  void clear_operation();
  ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation operation() const;
  void set_operation(::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation value);
  private:
  ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation _internal_operation() const;
  void _internal_set_operation(::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation value);
  public:

  // @@protoc_insertion_point(class_scope:smw.core.proto.ServiceDiscovery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smw::core::proto::ServiceInfo* service_info_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5fdiscovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceInfo

// uint32 service_id = 1;
inline void ServiceInfo::clear_service_id() {
  service_id_ = 0u;
}
inline uint32_t ServiceInfo::_internal_service_id() const {
  return service_id_;
}
inline uint32_t ServiceInfo::service_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.service_id)
  return _internal_service_id();
}
inline void ServiceInfo::_internal_set_service_id(uint32_t value) {
  
  service_id_ = value;
}
inline void ServiceInfo::set_service_id(uint32_t value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.service_id)
}

// uint32 instance_id = 2;
inline void ServiceInfo::clear_instance_id() {
  instance_id_ = 0u;
}
inline uint32_t ServiceInfo::_internal_instance_id() const {
  return instance_id_;
}
inline uint32_t ServiceInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.instance_id)
  return _internal_instance_id();
}
inline void ServiceInfo::_internal_set_instance_id(uint32_t value) {
  
  instance_id_ = value;
}
inline void ServiceInfo::set_instance_id(uint32_t value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.instance_id)
}

// string host_id = 4;
inline void ServiceInfo::clear_host_id() {
  host_id_.ClearToEmpty();
}
inline const std::string& ServiceInfo::host_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.host_id)
  return _internal_host_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceInfo::set_host_id(ArgT0&& arg0, ArgT... args) {
 
 host_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.host_id)
}
inline std::string* ServiceInfo::mutable_host_id() {
  std::string* _s = _internal_mutable_host_id();
  // @@protoc_insertion_point(field_mutable:smw.core.proto.ServiceInfo.host_id)
  return _s;
}
inline const std::string& ServiceInfo::_internal_host_id() const {
  return host_id_.Get();
}
inline void ServiceInfo::_internal_set_host_id(const std::string& value) {
  
  host_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceInfo::_internal_mutable_host_id() {
  
  return host_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceInfo::release_host_id() {
  // @@protoc_insertion_point(field_release:smw.core.proto.ServiceInfo.host_id)
  return host_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceInfo::set_allocated_host_id(std::string* host_id) {
  if (host_id != nullptr) {
    
  } else {
    
  }
  host_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:smw.core.proto.ServiceInfo.host_id)
}

// string process_id = 5;
inline void ServiceInfo::clear_process_id() {
  process_id_.ClearToEmpty();
}
inline const std::string& ServiceInfo::process_id() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceInfo.process_id)
  return _internal_process_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceInfo::set_process_id(ArgT0&& arg0, ArgT... args) {
 
 process_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceInfo.process_id)
}
inline std::string* ServiceInfo::mutable_process_id() {
  std::string* _s = _internal_mutable_process_id();
  // @@protoc_insertion_point(field_mutable:smw.core.proto.ServiceInfo.process_id)
  return _s;
}
inline const std::string& ServiceInfo::_internal_process_id() const {
  return process_id_.Get();
}
inline void ServiceInfo::_internal_set_process_id(const std::string& value) {
  
  process_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceInfo::_internal_mutable_process_id() {
  
  return process_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceInfo::release_process_id() {
  // @@protoc_insertion_point(field_release:smw.core.proto.ServiceInfo.process_id)
  return process_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceInfo::set_allocated_process_id(std::string* process_id) {
  if (process_id != nullptr) {
    
  } else {
    
  }
  process_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (process_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    process_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:smw.core.proto.ServiceInfo.process_id)
}

// -------------------------------------------------------------------

// ServiceDiscovery

// .smw.core.proto.ServiceDiscovery.ServiceDiscoveryOperation operation = 1;
inline void ServiceDiscovery::clear_operation() {
  operation_ = 0;
}
inline ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::_internal_operation() const {
  return static_cast< ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation >(operation_);
}
inline ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation ServiceDiscovery::operation() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceDiscovery.operation)
  return _internal_operation();
}
inline void ServiceDiscovery::_internal_set_operation(::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation value) {
  
  operation_ = value;
}
inline void ServiceDiscovery::set_operation(::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:smw.core.proto.ServiceDiscovery.operation)
}

// .smw.core.proto.ServiceInfo service_info = 2;
inline bool ServiceDiscovery::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool ServiceDiscovery::has_service_info() const {
  return _internal_has_service_info();
}
inline void ServiceDiscovery::clear_service_info() {
  if (GetArenaForAllocation() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::smw::core::proto::ServiceInfo& ServiceDiscovery::_internal_service_info() const {
  const ::smw::core::proto::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::smw::core::proto::ServiceInfo&>(
      ::smw::core::proto::_ServiceInfo_default_instance_);
}
inline const ::smw::core::proto::ServiceInfo& ServiceDiscovery::service_info() const {
  // @@protoc_insertion_point(field_get:smw.core.proto.ServiceDiscovery.service_info)
  return _internal_service_info();
}
inline void ServiceDiscovery::unsafe_arena_set_allocated_service_info(
    ::smw::core::proto::ServiceInfo* service_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smw.core.proto.ServiceDiscovery.service_info)
}
inline ::smw::core::proto::ServiceInfo* ServiceDiscovery::release_service_info() {
  
  ::smw::core::proto::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::smw::core::proto::ServiceInfo* ServiceDiscovery::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:smw.core.proto.ServiceDiscovery.service_info)
  
  ::smw::core::proto::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::smw::core::proto::ServiceInfo* ServiceDiscovery::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::smw::core::proto::ServiceInfo>(GetArenaForAllocation());
    service_info_ = p;
  }
  return service_info_;
}
inline ::smw::core::proto::ServiceInfo* ServiceDiscovery::mutable_service_info() {
  ::smw::core::proto::ServiceInfo* _msg = _internal_mutable_service_info();
  // @@protoc_insertion_point(field_mutable:smw.core.proto.ServiceDiscovery.service_info)
  return _msg;
}
inline void ServiceDiscovery::set_allocated_service_info(::smw::core::proto::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::smw::core::proto::ServiceInfo>::GetOwningArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:smw.core.proto.ServiceDiscovery.service_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace core
}  // namespace smw

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation>() {
  return ::smw::core::proto::ServiceDiscovery_ServiceDiscoveryOperation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_5fdiscovery_2eproto
