// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_5finfo_2eproto;
class ServiceInfo;
struct ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ServiceInfo* Arena::CreateMaybeMessage<::ServiceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ServiceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceInfo) */ {
 public:
  inline ServiceInfo() : ServiceInfo(nullptr) {}
  ~ServiceInfo() override;
  explicit constexpr ServiceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return new ServiceInfo();
  }

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceInfo";
  }
  protected:
  explicit ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostIdFieldNumber = 4,
    kProcessIdFieldNumber = 5,
    kServiceIdFieldNumber = 1,
    kInstanceIdFieldNumber = 2,
    kIsAvailableFieldNumber = 3,
  };
  // string host_id = 4;
  void clear_host_id();
  const std::string& host_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_host_id();
  void set_allocated_host_id(std::string* host_id);
  private:
  const std::string& _internal_host_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_id(const std::string& value);
  std::string* _internal_mutable_host_id();
  public:

  // string process_id = 5;
  void clear_process_id();
  const std::string& process_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_process_id();
  void set_allocated_process_id(std::string* process_id);
  private:
  const std::string& _internal_process_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_id(const std::string& value);
  std::string* _internal_mutable_process_id();
  public:

  // uint32 service_id = 1;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 instance_id = 2;
  void clear_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 instance_id() const;
  void set_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instance_id() const;
  void _internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_available = 3;
  void clear_is_available();
  bool is_available() const;
  void set_is_available(bool value);
  private:
  bool _internal_is_available() const;
  void _internal_set_is_available(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instance_id_;
  bool is_available_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceInfo

// uint32 service_id = 1;
inline void ServiceInfo::clear_service_id() {
  service_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceInfo::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceInfo::service_id() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.service_id)
  return _internal_service_id();
}
inline void ServiceInfo::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_id_ = value;
}
inline void ServiceInfo::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:ServiceInfo.service_id)
}

// uint32 instance_id = 2;
inline void ServiceInfo::clear_instance_id() {
  instance_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceInfo::_internal_instance_id() const {
  return instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceInfo::instance_id() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.instance_id)
  return _internal_instance_id();
}
inline void ServiceInfo::_internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instance_id_ = value;
}
inline void ServiceInfo::set_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:ServiceInfo.instance_id)
}

// bool is_available = 3;
inline void ServiceInfo::clear_is_available() {
  is_available_ = false;
}
inline bool ServiceInfo::_internal_is_available() const {
  return is_available_;
}
inline bool ServiceInfo::is_available() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.is_available)
  return _internal_is_available();
}
inline void ServiceInfo::_internal_set_is_available(bool value) {
  
  is_available_ = value;
}
inline void ServiceInfo::set_is_available(bool value) {
  _internal_set_is_available(value);
  // @@protoc_insertion_point(field_set:ServiceInfo.is_available)
}

// string host_id = 4;
inline void ServiceInfo::clear_host_id() {
  host_id_.ClearToEmpty();
}
inline const std::string& ServiceInfo::host_id() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.host_id)
  return _internal_host_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceInfo::set_host_id(ArgT0&& arg0, ArgT... args) {
 
 host_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceInfo.host_id)
}
inline std::string* ServiceInfo::mutable_host_id() {
  std::string* _s = _internal_mutable_host_id();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.host_id)
  return _s;
}
inline const std::string& ServiceInfo::_internal_host_id() const {
  return host_id_.Get();
}
inline void ServiceInfo::_internal_set_host_id(const std::string& value) {
  
  host_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceInfo::_internal_mutable_host_id() {
  
  return host_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceInfo::release_host_id() {
  // @@protoc_insertion_point(field_release:ServiceInfo.host_id)
  return host_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceInfo::set_allocated_host_id(std::string* host_id) {
  if (host_id != nullptr) {
    
  } else {
    
  }
  host_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.host_id)
}

// string process_id = 5;
inline void ServiceInfo::clear_process_id() {
  process_id_.ClearToEmpty();
}
inline const std::string& ServiceInfo::process_id() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.process_id)
  return _internal_process_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceInfo::set_process_id(ArgT0&& arg0, ArgT... args) {
 
 process_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServiceInfo.process_id)
}
inline std::string* ServiceInfo::mutable_process_id() {
  std::string* _s = _internal_mutable_process_id();
  // @@protoc_insertion_point(field_mutable:ServiceInfo.process_id)
  return _s;
}
inline const std::string& ServiceInfo::_internal_process_id() const {
  return process_id_.Get();
}
inline void ServiceInfo::_internal_set_process_id(const std::string& value) {
  
  process_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceInfo::_internal_mutable_process_id() {
  
  return process_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceInfo::release_process_id() {
  // @@protoc_insertion_point(field_release:ServiceInfo.process_id)
  return process_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceInfo::set_allocated_process_id(std::string* process_id) {
  if (process_id != nullptr) {
    
  } else {
    
  }
  process_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.process_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_5finfo_2eproto
